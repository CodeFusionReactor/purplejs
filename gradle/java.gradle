apply plugin: 'java'
apply plugin: 'jacoco'

def defaultEncoding = 'UTF-8'

compileJava {
    options.encoding = defaultEncoding
    options.compilerArgs = ['-Xlint:-options']
}

compileTestJava {
    options.encoding = defaultEncoding
    options.compilerArgs = ['-Xlint:-options']
}

configurations {
    testOutput.extendsFrom testRuntime
}

dependencies {
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.10.19'
    testOutput sourceSets.test.output
}

task testJar( type: Jar ) {
    group 'build'
    description 'Creates a jar file with all test sources.'
    from sourceSets.test.output
    classifier = 'test'
}

task sourceJar( type: Jar ) {
    classifier 'sources'
    from sourceSets.main.allJava
}

artifacts {
    testOutput testJar
    archives sourceJar
}

sourceCompatibility = '1.8'
targetCompatibility = sourceCompatibility

test {
    systemProperty 'java.awt.headless', 'true'
    jvmArgs '-Xmx2048m'
}

jar {
    manifest {
        attributes( ['Implementation-Version': project.version] )
    }
}

sourceSets {
    integrationTest {
        java.srcDir file( 'src/integTest/java' )
        resources.srcDir file( 'src/integTest/resources' )
        compileClasspath += sourceSets.main.output + configurations.testRuntime
        runtimeClasspath += output + compileClasspath
    }
}

task integrationTest( type: Test ) {
    description = 'Runs the integration tests.'
    group = 'verification'
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
    mustRunAfter test

    reports {
        html.destination = project.file( "$html.destination/integration" )
        junitXml.destination = project.file( "$junitXml.destination/integration" )
    }
}

check.dependsOn integrationTest
